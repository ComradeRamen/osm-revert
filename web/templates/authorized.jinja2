{% extends '_base.jinja2' %}
{% block body %}

<div class="d-flex justify-content-between mb-2">
    <h4 class="mb-0">üó∫Ô∏è osm-revert</h4>

    <div class="d-flex align-items-center">
        {% if user.img.href %}
        <img class="rounded" src="{{ user.img.href }}" width="32" height="32" alt="Profile picture">
        {% endif %}

        <h5 class="ms-1 mb-0">{{ user.display_name }}</h5>

        <form action="/logout" method="post">
            <input class="btn btn-sm btn-light ms-2" type="submit" value="Logout">
        </form>
    </div>
</div>

<label class="w-100">
    <span class="required" title="This field is required">Changesets:</span>
    <textarea id="changesets" class="form-control" rows="2" placeholder="118034381, 130000000, ‚Ä¶"
        spellcheck="false">{{ request.query_params.get('changesets', '') }}</textarea>
</label>

<label class="w-100">
    <a href="https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL" target="_blank">Overpass QL</a>
    filter (optional):
    <div class="small text-secondary"><i>Reverts elements that match either old or new, or both.</i></div>
    <textarea id="query-filter" class="form-control" rows="2"
        placeholder="node[ford=yes]; way[!highway]; rel(id:7532,99517)"
        spellcheck="false">{{ request.query_params.get('query-filter', '') }}</textarea>
</label>

<label class="w-100">
    <span class="required" title="This field is required">Comment:</span>
    <abbr title="The reverting changeset's comment">(?)</abbr>
    <textarea id="comment" class="form-control" rows="2" placeholder="I revert it because‚Ä¶" maxlength="255"></textarea>
</label>

<label class="w-100">
    Auto-discussion (optional):
    <abbr title="Comment on each of the reverted changesets">(?)</abbr>
    <textarea id="discussion" class="form-control" rows="2" placeholder="I reverted this changeset because‚Ä¶"
        maxlength="2000"></textarea>
</label>

<div class="text-end small mb-2">
    <div class="form-check form-check-inline">
        <input class="form-check-input" id="dt-a" type="radio" name="discussion_target" value="all" checked>
        <label class="form-check-label" for="dt-a">All changesets</label>
    </div>
    <div class="form-check form-check-inline">
        <input class="form-check-input" id="dt-n" type="radio" name="discussion_target" value="newest">
        <label class="form-check-label" for="dt-n">Newest only</label>
    </div>
    <div class="form-check form-check-inline">
        <input class="form-check-input" id="dt-o" type="radio" name="discussion_target" value="oldest">
        <label class="form-check-label" for="dt-o">Oldest only</label>
    </div>
</div>

<div class="row g-2 mb-3">
    <div class="col-md-6">
        <input id="submit" class="btn btn-primary w-100 py-2" type="button" value="Connecting‚Ä¶" disabled>
    </div>
    <div class="col-md-6">
        <input id="submit-osc" class="btn btn-secondary w-100 py-2" type="button" value="Connecting‚Ä¶" disabled>
    </div>
</div>

<label class="w-100">
    <textarea id="log" class="form-control font-monospace" rows="12" readonly></textarea>
    <div class="text-center small text-secondary">REVERT LOG</div>
</label>

<script>
    const form = document.getElementById('form')
    const changesets = document.getElementById('changesets')
    const query_filter = document.getElementById('query-filter')
    const comment = document.getElementById('comment')
    const discussion = document.getElementById('discussion')
    const submit = document.getElementById('submit')
    const submit_osc = document.getElementById('submit-osc')
    const log = document.getElementById('log')
    const ws = new WebSocket(`${document.location.protocol === 'https:' ? 'wss' : 'ws'}://${document.location.host}/ws`)

    let isAutoScrolling = true
    let isReverting = true
    let clearFields = false

    let wsDownloadingOsc = false
    let wsOsc = []

    const setIsReverting = state => {
        if (state) {
            wsDownloadingOsc = false
            wsOsc = []
        }

        isReverting = state
        submit.disabled = state
        submit_osc.disabled = state
    }

    ws.onopen = () => {
        submit.value = 'Revert and upload'
        submit_osc.value = 'üíæ Revert and download .osc'
        setIsReverting(false)
    }

    ws.onmessage = e => {
        const obj = JSON.parse(e.data)

        if (obj.message === "<osc>") {
            wsDownloadingOsc = true
            wsOsc = []
        }
        else if (obj.message === "</osc>") {
            const fileName = 'revert_' + new Date().toISOString().replace(/:/g, '_') + '.osc'
            const osc = wsOsc.join('\n')

            const a = document.createElement('a')
            const file = new Blob([osc], { type: 'text/xml; charset=utf-8' })
            a.href = URL.createObjectURL(file)
            a.download = fileName
            a.click()

            wsDownloadingOsc = false
            wsOsc = []
        }
        else if (wsDownloadingOsc) {
            wsOsc.push(obj.message)
        }
        else {
            log.value += obj.message + '\n'

            if (isAutoScrolling && log.scrollHeight > log.clientHeight)
                log.scrollTop = log.scrollHeight
        }

        if (obj.last === true) {
            if (clearFields && obj.message === "Exit code: 0") {
                changesets.value = ''
            }

            setIsReverting(false)
        }
    }

    ws.onclose = e => {
        console.log(e)
        setIsReverting(true)
        submit.value = 'Disconnected'
        submit_osc.value = 'Disconnected'
        log.value = `‚ö†Ô∏è Disconnected: ${e.reason}\n‚ö†Ô∏è Please reload the page`
    }

    const beginRevert = upload => {
        if (isReverting)
            return

        setIsReverting(true)
        clearFields = upload
        log.value = ''

        ws.send(JSON.stringify({
            changesets: changesets.value,
            query_filter: query_filter.value,
            comment: comment.value,
            upload: upload,
            discussion: discussion.value,
            discussion_target: document.querySelector('input[name="discussion_target"]:checked').value,
        }))
    }

    submit.addEventListener('click', e => {
        e.preventDefault()

        beginRevert(true)
    })

    submit_osc.addEventListener('click', e => {
        e.preventDefault()

        beginRevert(false)
    })

    log.addEventListener('scroll', () => {
        isAutoScrolling = log.scrollHeight - log.scrollTop < log.clientHeight + 5
    })
</script>
{% endblock %}
